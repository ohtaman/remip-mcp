//=============================================================================
// Type Aliases for specific constants
//=============================================================================

/** Categories for variables in PuLP. */
export type VariableCategory = 'Continuous' | 'Integer' | 'Binary';

/** Sense of an objective function. */
export type ObjectiveSense = -1; // -1 for Maximize, 1 for Minimize. PuLP's toDict uses -1 for LpMaximize.

/** Sense of a constraint. */
export type ConstraintSense = -1 | 0 | 1; // -1 for <=, 0 for ==, 1 for >=

//=============================================================================
// Problem Schema (based on PuLP's toDict output)
//=============================================================================

/**
 * Represents a single named coefficient, used in objectives and constraints.
 */
export interface Coefficient {
  name: string;
  value: number;
}

/**
 * Represents a single variable in the optimization problem.
 */
export interface Variable {
  name: string;
  lowBound: number | null;
  upBound: number | null;
  cat: VariableCategory | string; // Use the type alias. `| string` for safety.
  varValue?: number | null;
  dj?: number | null;
}

/**
 * Represents a single constraint in the optimization problem.
 */
export interface Constraint {
  name: string;
  coefficients: Coefficient[];
  sense: ConstraintSense; // Use the type alias
  constant: number;
  pi?: number | null;
}

/**
 * Represents the objective function of the problem.
 */
export interface Objective {
  name: string;
  coefficients: Coefficient[];
}

/**
 * Represents general parameters and metadata about the problem.
 */
export interface Parameters {
  name: string;
  sense: ObjectiveSense; // Use the type alias
  status?: number;
  sol_status?: number;
}

/**
 * Represents a Special Ordered Set (SOS) constraint.
 * The keys are variable names and the values are their weights.
 */
export type SOSConstraint = Record<string, number>;

/**
 * The detailed, type-safe representation of a problem sent to the ReMIP server.
 * This schema matches the structure generated by PuLP's `toDict()` method.
 */
export interface Problem {
  objective: Objective;
  constraints: Constraint[];
  variables: Variable[];
  parameters: Parameters;
  sos1?: SOSConstraint[];
  sos2?: SOSConstraint[];
}

//=============================================================================
// API-Specific Types (for communication)
//=============================================================================

/**
 * Represents the data format for a log event from the ReMIP API.
 */
export interface LogData {
  level?: string;
  timestamp?: string;
  message?: string;
}

/**
 * Represents the data format for a metric event from the ReMIP API.
 */
export interface MetricData {
  level?: string;
  timestamp?: string;
  iteration?: number;
  objective_value?: number;
  gap?: number;
}

export interface Logger {
  info(obj: Record<string, unknown>, msg?: string, ...args: unknown[]): void;
  info(msg: string, ...args: unknown[]): void;
  warn(obj: Record<string, unknown>, msg?: string, ...args: unknown[]): void;
  warn(msg: string, ...args: unknown[]): void;
  error(obj: Record<string, unknown>, msg?: string, ...args: unknown[]): void;
  error(msg: string, ...args: unknown[]): void;
  debug(obj: Record<string, unknown>, msg?: string, ...args: unknown[]): void;
  debug(msg: string, ...args: unknown[]): void;
}

/**
 * Options for the ReMIPClient constructor.
 */
export interface ReMIPClientOptions {
  /**
   * The base URL of the ReMIP server.
   * @default 'http://localhost:8000'
   */
  baseUrl?: string;
  /**
   * Whether to use Server-Sent Events (SSE) for streaming logs and results.
   * @default true
   */
  stream?: boolean;
  /**
   * An instance of a pino-compatible logger for logging client activity.
   */
  logger: Logger;
}
